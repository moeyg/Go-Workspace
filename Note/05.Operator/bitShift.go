// Bit Shift

// num << n : Left Shift, n비트만큼 왼족으로 이동하고 0으로 채움 = 2^n 증가
// num >> n : Right Shift, n비트만큼 오른쪽으로 이동하고 음수면 1, 양수면 0으로 채움 = 1/2n 감소
// 하지만, overflow가 발생시 값이 잘려 음수값이 될 수 있음

package main

import "fmt"

func bitShift() {
	// Left Shift

	var a int8 = 4
	var b int8 = 64

	fmt.Printf("%08b(%d) -> %08b(%d)\n", a, a, a << 2, a << 2) // 00000100(4) -> 00010000(16)
	//  4 = 0000 0100
	// 16 = 0001 0000
	fmt.Printf("%08b(%d) -> %08b(%d)\n", a, a, a << 4, a << 4) // 00000100(4) -> 01000000(64)
	//  4 = 0000 0100
	// 64 = 0100 0000
	fmt.Printf("%08b(%d) -> %08b(%d)\n", b, b, b << 1, b << 1) // 01000000(64) -> -10000000(-128)
	//   64 = 0100 0000
	// -128 - 1000 0000 (부호 비트가 1이면 음수)
	fmt.Printf("%08b(%d) -> %08b(%d)\n", b, b, b << 2, b << 2) // 01000000(64) -> -10000000(-128)
	// 64 = 0100 0000
	//  0 = 0000 0000 -> overflow


	// Right Shift

	var x uint8 = 128
	var y int8 = -128

	fmt.Printf("%08b(%d) -> %08b(%d)\n", x, x, x >> 2, x >> 2) // 10000000(128) -> 00100000(32)
	// 128 = 1000 0000
	//  32 = 0010 0000 -> 양수이기 때문에 이동한 자리를 0으로 채움
	fmt.Printf("%08b(%d) -> %08b(%d)\n", uint8(y), y, uint8(y >> 2), y >> 2) // 10000000(-128) -> 11100000(-32)
	// -128 = 1000 0000
	//  -32 = 1110 0000 -> 음수이기 때문에 이동한 자리를 1로 채움
}
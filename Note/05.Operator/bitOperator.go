// Bit Operator : 비트 연산자
// & : AND 연산자
// | : OR 연산자
// ^ : XOR 연산자

// 0 & 0 = 0		0 | 0 = 0		0 ^ 0 = 0
// 1 & 0 = 0		1 | 0 = 1		1 ^ 0 = 1
// 0 & 1 = 0		0 | 1 = 1		0 ^ 1 = 1
// 1 & 1 = 1		1 | 1 = 1		1 ^ 1 = 0

// &^ : Bit Clear
// ^(XOR) 연산자 먼저 실행 후 &(AND) 연산자 실행

package main

import "fmt"

func bitOperator() {
	fmt.Println(11 & 22) // 2
	// 11 = 0000 1011 
	// 22 = 0001 0110
	//  2 = 0000 0010

	fmt.Println(11 | 22) // 31
	// 11 = 0000 1011
	// 22 = 0001 0110
	// 31 = 0001 1111

	fmt.Println(11 ^ 22) // 29
	// 11 = 0000 1011
	// 22 = 0001 0110
	// 29 = 0001 1101

	// ^22 -> 0001 0110(22)가 비트 반전이 돼서 1110 1001(^22)
	fmt.Println(11 &^ 22) // 9
	//  11 = 0000 1011
	// ^22 = 1110 1001
	//	 9 = 0000 1001
}